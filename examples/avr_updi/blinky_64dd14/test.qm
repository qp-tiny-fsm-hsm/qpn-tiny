<?xml version="1.0" encoding="UTF-8"?>
<model version="5.2.3" links="0">
 <documentation>About this example:
-------------------
Simple &quot;Blinky&quot; console application for workstations (Windows, Linux, macOS)
(see &quot;QM Tutorial&quot; at: https://www.state-machine.com/qm/gs_tut.html)

This example demonstrates:
- Active object (Blinky) with state machine
- Board Support Package abstraction for portability
- BSP implementation for desktop OS (Windows, Linux, MacOS)
- Platform-independent main() function
- Makefile to build the generated code on desktop OS (Windows, Linux, MacOS)
- Customized tools for building the generated code directly from QM

Building the example:
---------------------
To build this example, you will need the QP-nano framework installed on your computer and the GNU-GCC compiler, which you can get by installing the QP-bundle from:

https://www.state-machine.com/#Downloads

NOTE: QP-nano has been discontinued and is NOT present in the newer releases of QP-bundle.


Running the example:
--------------------
This example is a simple console application, which you can run from a terminal.

For more QM examples for QP-nano see:
https://www.state-machine.com/qpn/exa.html</documentation>
 <framework name="qpn"/>
 <package name="AOs" stereotype="0x02">
  <class name="Test" superclass="qpn::QActive">
   <statechart properties="0x01">
    <initial target="../1">
     <action>/* arm the private time event for tick rate 0
* to expire in 1/2s and periodically every 1/2 second
*/
QActive_armX(&amp;me-&gt;super,
             0U,
             BSP_TICKS_PER_SEC/2U,
             BSP_TICKS_PER_SEC/2U);</action>
     <initial_glyph conn="2,3,5,1,20,5,-4">
      <action box="0,-2,6,2"/>
     </initial_glyph>
    </initial>
    <state name="off">
     <entry>BSP_ledOff();</entry>
     <tran trig="Q_TIMEOUT" target="../../2">
      <tran_glyph conn="2,16,3,1,18,6,-2">
       <action box="0,-2,14,3"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,6,16,12">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <state name="on">
     <entry>BSP_ledOn();</entry>
     <tran trig="Q_TIMEOUT" target="../../1">
      <tran_glyph conn="2,30,3,1,20,-19,-4">
       <action box="0,-2,13,2"/>
      </tran_glyph>
     </tran>
     <state_glyph node="2,20,16,12">
      <entry box="1,2,12,4"/>
     </state_glyph>
    </state>
    <state_diagram size="26,34"/>
   </statechart>
  </class>
  <operation name="Test_ctor" type="void" visibility="0x00" properties="0x01">
   <documentation>The Blinky &quot;constructor&quot; is provided outside of the Blinky class, so that it can be used independently from the class. This is part of the &quot;opaque pointer&quot; design idiom.</documentation>
   <code>Test * const me = &amp;AO_Test;
QActive_ctor(&amp;me-&gt;super, Q_STATE_CAST(&amp;Test_initial));</code>
  </operation>
 </package>
 <directory name=".">
  <file name="test.c">
   <text>#include &quot;qpn.h&quot;    /* QP-nano framework API */
#include &quot;bsp.h&quot;    /* Board Support Package interface */

/* ask QM to declare the Test class --------------------------------------*/
$declare${AOs::Test}

/* the single instance of the Blinky active object -------------------------*/
Test AO_Test;

/* ask QM to define the Blinky class ---------------------------------------*/
$define${AOs::Test_ctor}
$define${AOs::Test}</text>
  </file>
  <file name="test.h">
   <text>#ifndef TEST_H
#define TEST_H

/* active object(s) used in this application -------------------------------*/
extern struct Test AO_Test; /* opaque struct */
$declare${AOs::Test_ctor}

#endif /* TEST_H */</text>
  </file>
 </directory>
</model>
